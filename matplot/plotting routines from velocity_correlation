        
def standBackStats_perfectBackground_old(inFileList,name,units,writeOut,perfect_location,savenpy=False,maxd=100):
    
    theMap = map(np.load, inFileList)
    theList = list(theMap)
    allData = np.array(theList)
    #allData = np.array(list(map(np.load, inFileList)))
    #One inFile contains the following: [p1, p2, a, b, psiparallel, psiperpindicular]
    xs = allData[0][6]
    perfect = np.load(perfect_location.format(xs[1]-xs[0],units.replace('/','')))
    std = np.std(allData,axis=0)
    avg = np.mean(allData,axis=0)
    low68 = perfect[range(3,37,6)] # I don't know why I saved them in this order, but at least it's not too hard
    hi68  = perfect[range(4,37,6)] # to extract.
    low95 = perfect[range(5,37,6)]
    hi95  = perfect[range(6,37,6)]

     

    # if units == 'km/s':
    #     correlationScale = (0,5000,-1000,5000)
    # else:
    #     correlationScale = (0,50,-1000,5000)

    #momentScale = (0,30,0.25,1.1)
    plotName = name

    matplotlib.rc('font',size=10)
    
    fig1 = plt.figure()
    
    plt.title('$\psi_1$, {} Survey Mock'.format(plotName))
    plt.errorbar(xs,
                 avg[0],
                 yerr=std[0],
                 fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5
    )
    #print(xs)
    #print(low68[0])
    
    plt.fill_between(xs,low68[0][0:50],hi68[0][0:50],facecolor='black',alpha=0.25)
    plt.fill_between(xs,low95[0][0:50],hi95[0][0:50],facecolor='black',alpha=0.25)
    
    plt.xlabel('Distance, {}'.format(units))
    plt.ylabel('Correlation, (km/s)^2$')
    #plt.axis(correlationScale)
    if units == 'km/s':
        plt.xlim(0,5000)
    else:
        plt.xlim(0,50)
    #ax.yaxis.set_major_formatter(mtick.FormatStrFormatter('%.2e'))

    fig2 = plt.figure()
    plt.errorbar(xs, avg[1], yerr=std[1], fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    plt.title('$\psi_2$, {} Survey Mock'.format(plotName))
    plt.fill_between(xs,low68[1][0:50],hi68[1],facecolor='black',alpha=0.25)
    plt.fill_between(xs,low95[1][0:50],hi95[1],facecolor='black',alpha=0.25)
    plt.xlabel('Distance, Mpc/h')
    plt.ylabel('Correlation, $(km/s)^2$')
    #ax.yaxis.set_major_formatter(mtick.FormatStrFormatter('%.2e'))
    #plt.axis(correlationScale)
    if units == 'km/s':
        plt.xlim(0,5000)
    else:
        plt.xlim(0,50)

    with pdfback.PdfPages(writeOut+'-1.pdf') as pdf:
        pdf.savefig(fig1)

    with pdfback.PdfPages(writeOut+'-2.pdf') as pdf:
        pdf.savefig(fig2)
        
    plt.close(fig1)
    plt.close(fig2)
    if savenpy:
        np.save(writeOut,np.array([xs,avg[0],std[0],low68[0],hi68[0],low95[0],hi95[0],
                                   avg[1],std[1],low68[1],hi68[1],low95[1],hi95[1],
                                   avg[2],std[2],low68[2],hi68[2],low95[2],hi95[2],
                                   avg[3],std[3],low68[3],hi68[3],low95[3],hi95[3],
                                   avg[4],std[4],low68[4],hi68[4],low95[4],hi95[4],
                                   avg[5],std[5],low68[5],hi68[5],low95[5],hi95[5]]))
    
def standBackStats_toomanyfiles(inFileList,name,units,writeOut,maxd=100,savenpy=False):
    """Do statistics over many input files, for example the three groups of 100 surveys. Average them, plot w/errorbars."""
    assert(len(inFileList) == 100) #Not true in all cases, but sufficient for debugging. REMOVE this line if problems
    theMap = map(np.load, inFileList)
    theList = list(theMap)
    allData = np.array(theList)
    #allData = np.array(list(map(np.load, inFileList)))
    #One inFile contains the following: [p1, p2, a, b, psiparallel, psiperpindicular]
    xs = allData[0][6]
    std = np.std(allData,axis=0)
    avg = np.mean(allData,axis=0)
    low68 = np.percentile(allData,16,axis=0)
    hi68  = np.percentile(allData,100-16,axis=0)
    low95 = np.percentile(allData,2.5,axis=0)
    hi95  = np.percentile(allData,100-2.5,axis=0)
    

    # if units == 'km/s':
    #     correlationScale = (0,5000,-1000,5000)
    # else:
    #     correlationScale = (0,50,-1000,5000)

    #momentScale = (0,30,0.25,1.1)
    plotName = name

    matplotlib.rc('font',size=10)
    
    fig1 = plt.figure()
    
    plt.title('$\psi_1$, {} Survey Mock'.format(plotName))
    plt.errorbar(xs,
                 avg[0]/10**4,
                 yerr=std[0]/10**4,
                 fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5
    )
    plt.fill_between(xs,low68[0]/10**4,hi68[0]/10**4,facecolor='black',alpha=0.25)
    plt.fill_between(xs,low95[0]/10**4,hi95[0]/10**4,facecolor='black',alpha=0.25)
    
    plt.xlabel('Distance, {}'.format(units))
    plt.ylabel('Correlation, $10^4 (km/s)^2$')
    #plt.axis(correlationScale)
    if units == 'km/s':
        plt.xlim(0,5000)
    else:
        plt.xlim(0,50)

    fig2 = plt.figure()
    plt.errorbar(xs, avg[1]/10**4, yerr=std[1]/10**4, fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    plt.title('$\psi_2$, {} Survey Mock'.format(plotName))
    plt.fill_between(xs,low68[1]/10**4,hi68[1]/10**4,facecolor='black',alpha=0.25)
    plt.fill_between(xs,low95[1]/10**4,hi95[1]/10**4,facecolor='black',alpha=0.25)
    plt.xlabel('Distance, Mpc/h')
    plt.ylabel('Correlation, $(km/s)^2$')
    #plt.axis(correlationScale)
    if units == 'km/s':
        plt.xlim(0,5000)
    else:
        plt.xlim(0,50)

    
    with pdfback.PdfPages(writeOut+'-1.pdf') as pdf:
        pdf.savefig(fig1)

    with pdfback.PdfPages(writeOut+'-2.pdf') as pdf:
        pdf.savefig(fig2)
        
    plt.close(fig1)
    plt.close(fig2)
    if savenpy:
        np.save(writeOut,np.array([xs,avg[0],std[0],low68[0],hi68[0],low95[0],hi95[0],
                                   avg[1],std[1],low68[1],hi68[1],low95[1],hi95[1],
                                   avg[2],std[2],low68[2],hi68[2],low95[2],hi95[2],
                                   avg[3],std[3],low68[3],hi68[3],low95[3],hi95[3],
                                   avg[4],std[4],low68[4],hi68[4],low95[4],hi95[4],
                                   avg[5],std[5],low68[5],hi68[5],low95[5],hi95[5]]))
    
def standBackStats_allonepage(inFileList,name,units,writeOut,maxd=100):
    """Do statistics over many input files, for example the three groups of 100 surveys. Average them, plot w/errorbars."""
    assert(len(inFileList) == 100) #Not true in all cases, but sufficient for debugging. REMOVE this line if problems
    theMap = map(np.load, inFileList)
    theList = list(theMap)
    allData = np.array(theList)
    #allData = np.array(list(map(np.load, inFileList)))
    #One inFile contains the following: [p1, p2, a, b, psiparallel, psiperpindicular]
    xs = allData[0][6]
    std = np.std(allData,axis=0)
    avg = np.mean(allData,axis=0)
    low68 = np.percentile(allData,16,axis=0)
    hi68  = np.percentile(allData,100-16,axis=0)
    low95 = np.percentile(allData,2.5,axis=0)
    hi95  = np.percentile(allData,100-2.5,axis=0)
    
    #correlationScale = (0,30,0,160000)
    #momentScale = (0,30,0.25,1.1)
    plotName = name

    matplotlib.rc('font',size=10)
    
    f, ((ax1,ax2),(ax3,ax4),(ax5,ax6)) = plt.subplots(3,2,sharex='col',sharey='row',figsize=(8.5,11))
    f.suptitle('Statistics of the {} Survey Mocks'.format(plotName))
    ax1.errorbar(xs,
                 avg[0]/10**4,
                 yerr=std[0]/10**4,
                 fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5
    )
    ax1.fill_between(xs,low68[0]/10**4,hi68[0]/10**4,facecolor='black',alpha=0.25)
    ax1.fill_between(xs,low95[0]/10**4,hi95[0]/10**4,facecolor='black',alpha=0.25)
    ax1.set_title('$\psi_1$ Correlation')
    #ax1.set_xlabel('Distance, Mpc/h')
    ax1.set_ylabel('Correlation, $10^4 (km/s)^2$')
    #ax1.axis(correlationScale)
    
    ax2.errorbar(xs, avg[1]/10**4, yerr=std[1]/10**4, fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax2.set_title('$\psi_2$ Correlation')
    ax2.fill_between(xs,low68[1]/10**4,hi68[1]/10**4,facecolor='black',alpha=0.25)
    ax2.fill_between(xs,low95[1]/10**4,hi95[1]/10**4,facecolor='black',alpha=0.25)
    #plt.xlabel('Distance, Mpc/h')
    #plt.ylabel('Correlation, $(km/s)^2$')
    #plt.axis(correlationScale)
    
    ax3.errorbar(xs, avg[2], yerr=std[2], fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax3.set_title('Moment of the Selection Function, $\cal A$')
    ax3.fill_between(xs,low68[2],hi68[2],facecolor='black',alpha=0.25)
    ax3.fill_between(xs,low95[2],hi95[2],facecolor='black',alpha=0.25)
    #plt.xlabel('Distance, Mpc/h')
    ax3.set_ylabel('Value (unitless)')
    #plt.axis(momentScale)
    
    ax4.errorbar(xs, avg[3], yerr=std[3], fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax4.set_title('Moment of the Selection Function, $\cal B$')
    ax4.fill_between(xs,low68[3],hi68[3],facecolor='black',alpha=0.25)
    ax4.fill_between(xs,low95[3],hi95[3],facecolor='black',alpha=0.25)
    #plt.xlabel('Distance, Mpc/h')
    #plt.ylabel('Value (unitless)')
    #plt.axis(momentScale)

    ax5.errorbar(xs, avg[4]/10**4, yerr=std[4]/10**4, fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax5.fill_between(xs,low68[4]/10**4,hi68[4]/10**4,facecolor='black',alpha=0.25)
    ax5.fill_between(xs,low95[4]/10**4,hi95[4]/10**4,facecolor='black',alpha=0.25)
    ax5.set_title('$\Psi_{{\parallel}}$ Correlation')
    ax5.set_xlabel('Distance, {}'.format(units))
    ax5.set_ylabel('Correlation, $10^4 (km/s)^2$')
    #plt.axis(correlationScale)

    ax6.errorbar(xs,avg[5]/10**4, yerr=std[5]/10**4, fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax6.fill_between(xs,low68[5]/10**4,hi68[5]/10**4,facecolor='black',alpha=0.25)
    ax6.fill_between(xs,low95[5]/10**4,hi95[5]/10**4,facecolor='black',alpha=0.25)
    ax6.set_title('$\Psi_{{\perp}}$ Correlation')
    ax6.set_xlabel('Distance, {}'.format(units))
    #plt.ylabel('Correlation, $(km/s)^2$')
    #ax6.axis(correlationScale)

    if units == 'km/s':
        ax5.set_xbound(0,maxd*100)
        ax6.set_xbound(0,maxd*100)
    else:
        ax5.set_xbound(0,maxd)
        ax6.set_xbound(0,maxd)
    
    with pdfback.PdfPages(writeOut) as pdf:
        pdf.savefig(f)
    plt.close(f)
    np.save(writeOut,np.array([xs,avg[0],std[0],low68[0],hi68[0],low95[0],hi95[0],
                               avg[1],std[1],low68[1],hi68[1],low95[1],hi95[1],
                               avg[2],std[2],low68[2],hi68[2],low95[2],hi95[2],
                               avg[3],std[3],low68[3],hi68[3],low95[3],hi95[3],
                               avg[4],std[4],low68[4],hi68[4],low95[4],hi95[4],
                               avg[5],std[5],low68[5],hi68[5],low95[5],hi95[5]]))



def standBackStats_yuyu(inFileList,name,units,writeOut,min_r,numpoints,dr):
    """Do statistics over many input files, for example the three groups of 100 surveys. Average them, plot w/errorbars."""
    assert(len(inFileList) == 100) #Not true in all cases, but sufficient for debugging.
    theMap = map(np.load, inFileList)
    theList = list(theMap)
    theList2 = []
    
    
    #One inFile contains the following: [p1, p2, a, b]
    xs,intervals = common.genBins(min_r,numpoints,dr,'lin')
    
    for array in theList:
        p1 = array[:,0]
        p2 = array[:,1]
        a = array[:,2]
        b = array[:,3]
        aminusb = (a-b)
        ppar = ((1-b)*p1-(1-a)*p2)/aminusb
        pprp = (a*p2-b*p1)/aminusb
    
        thing = np.concatenate((np.atleast_2d(p1).T,
                                np.atleast_2d(p2).T,
                                np.atleast_2d(a).T,
                                np.atleast_2d(b).T,
                                np.atleast_2d(ppar).T,
                                np.atleast_2d(pprp).T),axis=1).T
 
        theList2.append(thing)

    allData = np.array(theList2)
    print(allData[0])
 
    std = np.std(allData,axis=0)
    avg = np.mean(allData,axis=0)
    low68 = np.percentile(allData,16,axis=0)
    hi68  = np.percentile(allData,100-16,axis=0)
    low95 = np.percentile(allData,2.5,axis=0)
    hi95  = np.percentile(allData,100-2.5,axis=0)
    print(len(xs), avg[0].shape)   
    #correlationScale = (0,30,0,160000)
    #momentScale = (0,30,0.25,1.1)
    plotName = name

    matplotlib.rc('font',size=10)
    
    f, ((ax1,ax2),(ax3,ax4),(ax5,ax6)) = plt.subplots(3,2,sharex='col',sharey='row',figsize=(8.5,11))
    f.suptitle('Statistics of the {} Survey Mocks'.format(plotName))
    ax1.errorbar(xs,
                 avg[0]/10**4,
                 yerr=std[0]/10**4,
                 fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5
    )
    ax1.fill_between(xs,low68[0]/10**4,hi68[0]/10**4,facecolor='black',alpha=0.25)
    ax1.fill_between(xs,low95[0]/10**4,hi95[0]/10**4,facecolor='black',alpha=0.25)
    ax1.set_title('$\psi_1$ Correlation')
    #ax1.set_xlabel('Distance, Mpc/h')
    ax1.set_ylabel('Correlation, $10^4 (km/s)^2$')
    #ax1.axis(correlationScale)
    
    ax2.errorbar(xs, avg[1]/10**4, yerr=std[1]/10**4, fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax2.set_title('$\psi_2$ Correlation')
    ax2.fill_between(xs,low68[1]/10**4,hi68[1]/10**4,facecolor='black',alpha=0.25)
    ax2.fill_between(xs,low95[1]/10**4,hi95[1]/10**4,facecolor='black',alpha=0.25)
    #plt.xlabel('Distance, Mpc/h')
    #plt.ylabel('Correlation, $(km/s)^2$')
    #plt.axis(correlationScale)
    
    ax3.errorbar(xs, avg[2], yerr=std[2], fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax3.set_title('Moment of the Selection Function, $\cal A$')
    ax3.fill_between(xs,low68[2],hi68[2],facecolor='black',alpha=0.25)
    ax3.fill_between(xs,low95[2],hi95[2],facecolor='black',alpha=0.25)
    #plt.xlabel('Distance, Mpc/h')
    ax3.set_ylabel('Value (unitless)')
    #plt.axis(momentScale)
    
    ax4.errorbar(xs, avg[3], yerr=std[3], fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax4.set_title('Moment of the Selection Function, $\cal B$')
    ax4.fill_between(xs,low68[3],hi68[3],facecolor='black',alpha=0.25)
    ax4.fill_between(xs,low95[3],hi95[3],facecolor='black',alpha=0.25)
    #plt.xlabel('Distance, Mpc/h')
    #plt.ylabel('Value (unitless)')
    #plt.axis(momentScale)

    ax5.errorbar(xs, avg[4]/10**4, yerr=std[4]/10**4, fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax5.fill_between(xs,low68[4]/10**4,hi68[4]/10**4,facecolor='black',alpha=0.25)
    ax5.fill_between(xs,low95[4]/10**4,hi95[4]/10**4,facecolor='black',alpha=0.25)
    ax5.set_title('$\Psi_{{\parallel}}$ Correlation')
    ax5.set_xlabel('Distance, {}'.format(units))
    ax5.set_ylabel('Correlation, $10^4 (km/s)^2$')
    #plt.axis(correlationScale)

    ax6.errorbar(xs,avg[5]/10**4, yerr=std[5]/10**4, fmt = 'k-',
                 elinewidth=0.5,
                 capsize=2,
                 capthick=0.5)
    ax6.fill_between(xs,low68[5]/10**4,hi68[5]/10**4,facecolor='black',alpha=0.25)
    ax6.fill_between(xs,low95[5]/10**4,hi95[5]/10**4,facecolor='black',alpha=0.25)
    ax6.set_title('$\Psi_{{\perp}}$ Correlation')
    ax6.set_xlabel('Distance, {}'.format(units))
    #plt.ylabel('Correlation, $(km/s)^2$')
    #ax6.axis(correlationScale)

    if units == 'km/s':
        ax5.set_xbound(0,100*100)
        ax6.set_xbound(0,100*100)
    else:
        ax5.set_xbound(0,100)
        ax6.set_xbound(0,100)
    
    with pdfback.PdfPages(writeOut) as pdf:
        pdf.savefig(f)
    plt.close(f)
    np.save(writeOut,np.array([xs,avg[0],std[0],low68[0],hi68[0],low95[0],hi95[0],
                               avg[1],std[1],low68[1],hi68[1],low95[1],hi95[1],
                               avg[2],std[2],low68[2],hi68[2],low95[2],hi95[2],
                               avg[3],std[3],low68[3],hi68[3],low95[3],hi95[3],
                               avg[4],std[4],low68[4],hi68[4],low95[4],hi95[4],
                               avg[5],std[5],low68[5],hi68[5],low95[5],hi95[5]]))

def sendMessage(message):
    server = smtplib.SMTP( "smtp.gmail.com", 587 )
    login = common.getdict('mail.json')
    server.starttls()
    server.login(*(login[0]))
    print(server.sendmail("",login[1],message))
    server.quit()

